#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>

void print(int a)
{
	cout << a << endl;
}

int main()
{
	//创建一个vector容器，数组
	vector<int> v1;
	//向容器中插入数据,尾插法
	v1.push_back(1);
	v1.push_back(21);
	v1.push_back(31);
	v1.push_back(4);

	//通过迭代器访问容器中的数据
	vector<int>::iterator itbegin = v1.begin();//起始迭代器，指向容器中的第一个元素
	vector<int>::iterator itend = v1.end();//结束迭代器 ，指向容器中最后一个元素的后一个

	////遍历方式
	
	//while (itbegin != itend)
	//{
	//	cout << *itbegin << endl;
	//	itbegin++; 
	//}

	/*for (vector<int>::iterator itbegin = v1.begin(); itbegin != v1.end(); itbegin++)
		cout << *itbegin << " ";*/

	//for_each(itbegin, itend, print);
	for_each(v1.begin(), v1.end(), print);
	return 0;
}

存放自定义数据类型

class Person
{
public:
	string m_name;
	int m_age;
	Person(string name, int age)
	{
		this->m_name = name;
		this->m_age = age;
	}
};

int main()
{
	/*Person p1("a", 1), p2("b", 2), p3("c", 3);

	vector<Person> c;
	c.push_back(p1);
	c.push_back(p2);
	c.push_back(p3);

	for (vector<Person>::iterator it = c.begin(); it != c.end(); it++)
	{
		cout << (*it).m_name << " " << (*it).m_age << endl;
		cout << it->m_name << " " << it->m_age << endl;
	}*/

	Person p1("a", 1), p2("b", 2), p3("c", 3);

	vector<Person*> c;
	c.push_back(&p1);
	c.push_back(&p2);
	c.push_back(&p3);

	for (vector<Person*>::iterator it = c.begin(); it != c.end(); it++)
	{
		cout << (*it)->m_name << " " << (*it)->m_age << endl;
	
	}
	return 0;
}
