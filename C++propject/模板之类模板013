#include<iostream>
using namespace std;
#include <string>

template <class nametype, class typeage>
class Person
{
public:
	nametype m_name;
	typeage m_age;
	Person(nametype ma, typeage ge)
	{
		this->m_name = ma;
		this->m_age = ge;
	}

	void show()
	{
		cout << this->m_name << endl << m_age;
	}
};

int main()
{
	Person<string, int> p("sb", 250);
	p.show();
	return 0;
}

类模板与函数模板的区别
1.类模板没有自动类型推导
2.类模板在模板参数列表中可以有默认参数

template <class nametype = string, class agetype = int>
class Person
{
public:
	nametype m_name;
	agetype m_age;
	Person(nametype name, agetype age)
	{
		this->m_age = age;
		this->m_name = name;
	}
	void show()
	{
		cout << this->m_name << " " << this->m_age;
	}
};

int main()
{
	//Person p1("sun", 999);1.
	/*Person<string, int> p1("sun", 999);
	p1.show();*/
	Person<>p2("pig", 666);
	p2.show();
	return 0;
}

普通类中的成员函数一开始就可以创建
类模板中的成员函数在调用时才创建

通过类模板创建的对象，可以有三种方式进行传参，比较广泛运用的是转入指定类型
