/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    unordered_map<int, int> Index;

    TreeNode* build(const vector<int>& preorder, const vector<int>& inorder, int pre_l, int pre_r, int ino_l, int ino_r)
    {
        if (ino_l > ino_r) return NULL;
        
        int root_Val = preorder[pre_l];
        int root_Index = Index[root_Val];
        
        TreeNode* root = new TreeNode(root_Val);
        if (ino_l == ino_r) return root;
        
        int size = root_Index - ino_l;
        root->left = build(preorder, inorder, pre_l + 1, size + pre_l, ino_l, root_Index - 1);
        root->right = build(preorder, inorder, pre_l + size + 1, pre_r, root_Index + 1, ino_r);
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        for (int i = 0; i < preorder.size(); ++i)
        Index[inorder[i]] = i;
        return build(preorder, inorder, 0, preorder.size() - 1, 0, inorder.size() - 1);
    }
};
