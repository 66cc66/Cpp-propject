#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

class print
{
public:
	void operator()(int val)
	{
		cout << val << " ";
	}
};

int main()
{
	vector<int> v;
	v.push_back(0);
	v.push_back(1);
	v.push_back(0);
	v.push_back(3);
	v.push_back(12);
	cout << "移除前：\n";
	for_each(v.begin(), v.end(), print());
	remove(v.begin(), v.end(), 0);
	cout << "\n移除后：\n";
	for (int i = 1; i <= count(v.begin(), v.end(), 0); ++i)
	{
		v[v.size() - i] = 0;
	}
	for_each(v.begin(), v.end(), print());
	return 0;
}

template <class ForwardIterator, class T>
ForwardIterator remove(ForwardIterator first, ForwardIterator last, const T& val)
{
	ForwardIterator result = first;
	while (first != last)
	{
		if (!(*first == val))
		{
			*result = move(*first);
			++result;
		}
		++first;
	}
	return result;
}
