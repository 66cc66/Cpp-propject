class Solution 
{
public:
    TreeNode* deleteNode(TreeNode* root, int key) 
    {
        if (root == nullptr)    return nullptr;
        if (key > root->val)    root->right = deleteNode(root->right, key);     // 去右子树删除
        else if (key < root->val)    root->left = deleteNode(root->left, key);  // 去左子树删除
        else    // 当前节点就是要删除的节点
        {
            if (! root->left)   return root->right; // 情况1，欲删除节点无左子
            if (! root->right)  return root->left;  // 情况2，欲删除节点无右子
            TreeNode* node = root->right;           // 情况3，欲删除节点左右子都有 
            while (node->left)          // 寻找欲删除节点右子树的最左节点
                node = node->left;
            node->left = root->left;    // 将欲删除节点的左子树成为其右子树的最左节点的左子树
            root = root->right;         // 欲删除节点的右子顶替其位置，节点被删除
        }
        return root;    
    }
};


    //-------------------------------------------------------------------------
  class Solution {
public:
    //掌握二叉搜索树BST的结构性质和删除节点的规律该节点有两个子节点，为了不破坏 BST 的性质，该节点必须找到左子树中最大的那个节点，或者右子树中最小的那个节点来接替自己。
我们所要作的就是找到左子树最大的或者右子树最下的节点来接替就行了


    TreeNode* deleteNode(TreeNode* root, int key) {
        if (root == nullptr)return nullptr;
        if (root->val == key) {
            if (root->left == nullptr)return root->right;
            if (root->right == nullptr)return root->left;
            TreeNode* temp = getmin(root->right);
            root->right = deleteNode(root->right, temp->val);
            temp->left = root->left;
            temp->right = root->right;
            root = temp;
        }
        else if (root->val > key)root->left = deleteNode(root->left, key);
        else root->right = deleteNode(root->right, key);
        return root;
    }
private:
    //寻找右子树中最小的节点
    TreeNode* getmin(TreeNode* node) {
        while (node->left != nullptr)node = node->left;
        return node;
    }
};

