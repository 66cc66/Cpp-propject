TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return root;
        if(key<root->val)root->left=deleteNode(root->left,key);
        if(key>root->val)root->right=deleteNode(root->right,key);
        if(key==root->val){
            if(!root->left&&!root->right)return NULL;
            if(root->left&&!root->right)return root->left;
            if(!root->left&&root->right)return root->right;
            TreeNode* temp=root->right;
            while(temp->left)temp=temp->left;
            root->val=temp->val;
            root->right=deleteNode(root->right,root->val);
        }
        return root;
    }
    
    //-------------------------------------------------------------------------
  class Solution {
public:
    //掌握二叉搜索树BST的结构性质和删除节点的规律该节点有两个子节点，为了不破坏 BST 的性质，该节点必须找到左子树中最大的那个节点，或者右子树中最小的那个节点来接替自己。
我们所要作的就是找到左子树最大的或者右子树最下的节点来接替就行了


    TreeNode* deleteNode(TreeNode* root, int key) {
        if (root == nullptr)return nullptr;
        if (root->val == key) {
            if (root->left == nullptr)return root->right;
            if (root->right == nullptr)return root->left;
            TreeNode* temp = getmin(root->right);
            root->right = deleteNode(root->right, temp->val);
            temp->left = root->left;
            temp->right = root->right;
            root = temp;
        }
        else if (root->val > key)root->left = deleteNode(root->left, key);
        else root->right = deleteNode(root->right, key);
        return root;
    }
private:
    //寻找右子树中最小的节点
    TreeNode* getmin(TreeNode* node) {
        while (node->left != nullptr)node = node->left;
        return node;
    }
};

