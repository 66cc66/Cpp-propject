TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return root;
        if(key<root->val)root->left=deleteNode(root->left,key);
        if(key>root->val)root->right=deleteNode(root->right,key);
        if(key==root->val){
            if(!root->left&&!root->right)return NULL;
            if(root->left&&!root->right)return root->left;
            if(!root->left&&root->right)return root->right;
            TreeNode* temp=root->right;
            while(temp->left)temp=temp->left;
            root->val=temp->val;
            root->right=deleteNode(root->right,root->val);
        }
        return root;
    }
    
    //-------------------------------------------------------------------------
    class Solution 
 {
public:
    TreeNode* deleteNode(TreeNode* root, int key) 
    {
        if (root == NULL)
            return NULL;
        if (root->val == key)
        {
            if (root->left == NULL && root->right == NULL)
            {
                delete root;
                return NULL;
            }
            if (root->left == NULL)
            {
                TreeNode* t = root;
                root = root->right;
                delete t;
                return root;
            }
            else if (root->right == NULL)
            {
                TreeNode* t = root;
                root = root->left;
                delete t;
                return root;
            }
            else
            {
                TreeNode* temp = root->right;
                while (temp->left)
                {
                    temp = temp->left;
                }
                root->val = temp->val;
                root->right = deleteNode(root->right, root->val);
            }
        }
        else if (root->val < key)
            root->right = deleteNode(root->right, key);
        else
            root->left = deleteNode(root->left, key);
        return root;
    }
};
