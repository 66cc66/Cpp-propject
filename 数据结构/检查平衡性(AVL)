int Depth(TreeNode* root)
    {
        if (root == NULL)
            return 0;
        return max(Depth(root->left), Depth(root->right)) + 1;
    }

    bool isBalanced(TreeNode* root) 
    {
       
        if (root == NULL)
            return true;
        int left = Depth(root->left);
        int right = Depth(root->right);
        if (abs(left - right) > 1)
            return false;
        return isBalanced(root->left) && isBalanced(root->right);//左右子树必须也是平衡二叉树
    }
    
    //自底向上递归的做法类似于后序遍历，对于当前遍历到的节点，先递归地判断其左右子树是否平衡，再判断以当前节点为根的子树是否平衡。
    //如果一棵子树是平衡的，则返回其高度（高度一定是非负整数），否则返回 -1−1。如果存在一棵子树不平衡，则整个二叉树一定不平衡。
    class Solution 
    {
    public:
    int height(TreeNode* root) 
    {
        if (root == NULL) 
        {
            return 0;
        }
        int leftHeight = height(root->left);
        int rightHeight = height(root->right);
        if (leftHeight == -1 || rightHeight == -1 || abs(leftHeight - rightHeight) > 1) 
        {
            return -1;
        } else 
        {
            return max(leftHeight, rightHeight) + 1;
        }
    }

    bool isBalanced(TreeNode* root) 
    {
        return height(root) >= 0;
    }
};

